master-username threebeesroot
master-user-password dbpassword123

export PROD_CONNECTION_URL="postgresql://threebeesroot:dbpassword123@threebees-db-instance.cfryqozdhn84.eu-west-1.rds.amazonaws.com:5432/threebees"
gp env PROD_CONNECTION_URL="postgresql://threebeesroot:dbpassword123@threebees-db-instance.cfryqozdhn84.eu-west-1.rds.amazonaws.com:5432/threebees"

aws ec2 modify-security-group-rules \
    --group-id $DB_SG_ID \
    --security-group-rules "SecurityGroupRuleId=$DB_SG_RULE_ID,SecurityGroupRule={Description=GITPOD,IpProtocol=tcp,FromPort=5432,ToPort=5432,CidrIpv4=$GITPOD_IP/32}"

aws ecs create-cluster --cluster-name threebees --service-connect-defaults namespace=threebees

aws ecr create-repository --repository-name threebees-python --image-tag-mutability MUTABLE


export DEFAULT_VPC_ID=$(aws ec2 describe-vpcs \
--filters "Name=isDefault, Values=true" \
--query "Vpcs[0].VpcId" \
--output text)

export THREEBEES_SERVICE_SG=$(aws ec2 create-security-group \
  --group-name "threebees-srv-sg" \
  --description "Security group for Threebees services on ECS" \
  --vpc-id $DEFAULT_VPC_ID \
  --query "GroupId" --output text)

  
  aws ec2 authorize-security-group-ingress \
  --group-id $THREEBEES_SERVICE_SG \
  --protocol tcp \
  --port 80 \
  --cidr 0.0.0.0/0

aws ecs register-task-definition --cli-input-json file://aws/task-definitions/backend-flask.json


#connect to the task
  aws ecs execute-command  \
--region $AWS_DEFAULT_REGION \
--cluster threebees \
--task 2773fca3ca6c4f929876e7225d06f4f1 \
--container backend-flask \
--command "/bin/bash" \
--interactive


docker build \
--build-arg REACT_APP_BACKEND_URL="https://api.threebeesknees.co.uk" \
--build-arg REACT_APP_AWS_PROJECT_REGION="$AWS_DEFAULT_REGION" \
--build-arg REACT_APP_AWS_COGNITO_REGION="$AWS_DEFAULT_REGION" \
--build-arg REACT_APP_AWS_USER_POOLS_ID="eu-west-1_7IhDddeJf" \
--build-arg REACT_APP_CLIENT_ID="2lofh72buuh2ovukn5gjj6rv71" \
-t frontend-react-js \
-f Dockerfile.prod \
.

docker run -rm \
-p 4567:4567 \
-e AWS_ENDPOINT_URL="http://dynamodb-local:8000" \
-e CONNECTION_URL="postgresql://postgres:password@db:5432/threebees" \
-e FRONTEND_URL="https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}" \
-e BACKEND_URL="https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}" \
-e OTEL_SERVICE_NAME='backend-flask' \
-e OTEL_EXPORTER_OTLP_ENDPOINT="https://api.honeycomb.io" \
-e OTEL_EXPORTER_OTLP_HEADERS="x-honeycomb-team=${HONEYCOMB_API_KEY}" \
-e AWS_XRAY_URL="*4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}*" \
-e AWS_XRAY_DAEMON_ADDRESS="xray-daemon:2000" \
-e AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}" \
-e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
-e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
-e ROLLBAR_ACCESS_TOKEN="${ROLLBAR_ACCESS_TOKEN}" \
-e AWS_COGNITO_USER_POOL_ID="${AWS_COGNITO_USER_POOL_ID}" \
-e AWS_COGNITO_USER_POOL_CLIENT_ID="2lofh72buuh2ovukn5gjj6rv71" \   
-it backend-flask-prod


aws ecs create-service --cli-input-json file://aws/json/service-backend-flask.json
aws ecs create-service --cli-input-json file://aws/json/service-frontend-react-js.json